services:
  waste_annotator:
    build:
      context: WasteAnnotator
      dockerfile: ./docker/Dockerfile
    ports:
      - "8669:8669"
    stdin_open: true
    tty: true
    volumes:
      # Bind the WasteAnnotator folder to the container to allow for live changes in the code
      - type: bind
        source: ./WasteAnnotator
        target: /waste-annotator
      # Use a shared repository folder to avoid downloading the same data multiple times
      - type: bind
        source: ./data
        target: /waste-annotator/data


  auto-fl:
    image: cezarsas/autofl:latest
    ports:
      - "8888:8888"
      - "8000:8000"
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    volumes:
      # Override the configuration of AutoFL
      - type: bind
        source: ./config/main.yaml
        target: /autofl/config/main.yaml
      # Use a shared repository folder to avoid downloading the same data multiple times
      - type: bind
        source: ./data/repository
        target: /autofl/data/repository
      # Bind the models folder of the container
      - type: bind
        source: ./data/models/
        target: /autofl/data/models/


  # Separate database for storing component labelling.
  # Optional, not necessarily needed. We opt to use JSON files instead.
  #  db_pipeline:
  #    image: postgres:16.4-bullseye
  #    restart: always
  #    environment:
  #      POSTGRES_DB: "pipeline"
  #      POSTGRES_USER: "pipeline_user"
  #      POSTGRES_PASSWORD: "pipeline_pw"
  #    healthcheck:
  #      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
  #      interval: 1s
  #      timeout: 5s
  #      retries: 10
  #    ports:
  #        - "4432:5432"
  #    volumes:
  #      - ./database/pipelinedb:/var/lib/postgresql/data
  #      - ./WasteAnnotator/docker/sql:/docker-entrypoint-initdb.d/

  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: "auto_fl"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "temp"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - ./database/auto_fl_db:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d/ # Folder containing the SQL scripts to be executed on the database creation (copied from AutoFL repo)

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"